#!/usr/bin/env python3

import argparse
import uuid

from datetime import datetime

from sylva_algorithm_runner import YamlConfiguration, AlgorithmRunOrderStatus, AlgorithmRunner
from sylva_algorithm_runner.repositories import DatabaseRepository, GitHubRepository, LogRepository

parser = argparse.ArgumentParser(description="""Runs an algorithm.""")

parser.add_argument("id", type=str, help="ID of algorithm run order")
args = parser.parse_args()

configuration = YamlConfiguration("/etc/sylva-algorithm-runner/config.yaml")
database_repository = DatabaseRepository(configuration.get("database"))
log_repository = LogRepository(configuration.get("database"), True)

public_github_repository = GitHubRepository()

process_id = str(uuid.uuid4())
print("{0} - {1} - START - Loading algorithm run order with id {2}.".format(datetime.now().isoformat(), process_id, args.id))

algorithm_run_order = database_repository.get_algorithm_run_order_in_status_created(args.id)

if algorithm_run_order is None:
    print("{0} - {1} - ERROR - Could not load algorithm with ID {2} in status 'created'.".format(datetime.now().isoformat(), process_id, args.id))

else:
    tag_for_release = public_github_repository.get_tag_for_public_release(algorithm_run_order.algorithmRepository, algorithm_run_order.algorithmVersion)
    if (algorithm_run_order.is_valid() and tag_for_release is not None):
        # qualified for running
        algorithm_runner = AlgorithmRunner(configuration.get("runner"), process_id, log_repository)
        algorithm_runner.run(algorithm_run_order)

    else:
        print("{0} - {1} - ERROR - Algorithm run order with id {2} is not valid.".format(datetime.now().isoformat(), process_id, args.id))
        database_repository.update_algorithm_run_order_status(args.id, AlgorithmRunOrderStatus.INVALID)
        exit(1)
    